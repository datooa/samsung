testvec <- c(TRUE, "scandinavia", "phallus", 42, "apples")
is.vector(testvec)
str(testvec)
rm(testvec)
testvec
min_per_year <- 60 * 24 * 365
hrs_per_year <- vid_hrs_per_minute * min_per_year
vid_hrs_per_minute <- 300
min_per_year <- 60 * 24 * 365
hrs_per_year <- vid_hrs_per_minute * min_per_year
24 * 365
168 * 52
hrs_per_year / 8760
rm(hrs_per_year)
rm(min_per_year)
rm(vid_hrs_per_minute)
?sum
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
sum(earnings - expenses)
source('~/.active-rstudio-document')
# Casino winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
# Mid-week poker results: poker_midweek
poker_midweek <- poker_vector[2:4]
poker_midweek
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
# Select the first three elements from poker_vector: poker_start
poker_start <- poker_vector[c("Monday", "Tuesday", "Wednesday")]
# Calculate the average poker gains during the first three days: avg_poker_start
avg_poker_start <- mean(poker_start)
avg_poker_start
?len
?len()
??len
?setdiff
setdiff(x,y)
?setdiff
?matrix()
days_vector
days_vector2 <- c("Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
days <- matrix(rbind(first = days_vector, second = days_vector2), nrow = 2, ncol = 5, byrow = TRUE)
days
days <- matrix(rbind("first" = days_vector, "second" = days_vector2), nrow = 2, ncol = 5, byrow = TRUE)
days
days <- matrix(rbind(days_vector, days_vector2), nrow = 2, ncol = 5, byrow = TRUE, rownames <- c("first", "second"))
days <- matrix(rbind(days_vector, days_vector2), nrow = 2, ncol = 5, byrow = TRUE, rownames <- list("first", "second"))
days <- matrix(rbind(days_vector, days_vector2), nrow = 2, ncol = 5, byrow = TRUE, rownames <- list(c("first", "second"))
days <- matrix(rbind(days_vector, days_vector2), nrow = 2, ncol = 5, byrow = TRUE, rownames <- list(c("first", "second")))
days <- matrix(rbind(days_vector, days_vector2), nrow = 2, ncol = 5, byrow = TRUE, rownames <- list(c("first", "second")))
days
days <- matrix(rbind(days_vector, days_vector2), nrow = 2, ncol = 5, byrow = TRUE, rownames = list(c("first", "second")))
days
days <- matrix(rbind(days_vector, days_vector2), nrow = 2, ncol = 5, byrow = TRUE, rownames = list("first", "second"))
days <- matrix(rbind(days_vector, days_vector2), nrow = 2, ncol = 5, byrow = TRUE, rownames = list(c(first, second)))
?as.matrix
?seq
?as.character
?data.frame
?order
?rowsums
?rowsum
?rowSums
?order
?sort
r.version.string
R.version.string
install.packages("swirl")
library(swirl)
swirl()
myvector <- c(1:20)
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_vector, my_matrix2)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
swirl()
library(swirl)
swirl()
TRUE == TRUE
(F == T) == F
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
?%
submit
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
evaliuate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(phallus)
telegram("phallus"")
]
telegram("hi")
telegram("hi")
submit
submit()
mad_libs(noun = "phallus", place = "dirty china", adjective = "rosy")
submit()
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
?rbinom
?numeric()
pi
setwd("~desktop/r programming coursera/specdata")
args(rnorm)
rnorm
?rnorm
rnorm(10, 5)
mean(rnorm(10, 5))
mean(rnorm(100, 5))
mean(rnorm(1000, 5))
mean(rnorm(10000, 5))
mean(rnorm(100000, 5))
mean(rnorm(100000000, 5))
mean(rnorm(10, 5))
rowSums
rowMeans
gl
?gl
?tapply
library(datasets)
ls
ls()
ls(datasets)
head(airquality)
?gl
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
ls(datasets)
head(airquality)
library(datasets)
data()
data(airmiles)
summary(airmiles)
head(airmiles)
str(airmiles)
dim(airmiles)
tail(airmiles)
dara(esoph)
data(esoph)
str(esoph)
summary(esoph)
tapply(esop$nca, esoph$age, mean)
tapply(esoph$nca, esoph$age, mean)
tapply(esoph$nca, esoph$age, range)
tapply(esoph$nca, esoph$age, range, simplify = TRUE)
sapply(esoph$nca, esoph$age, range)
library(iris)
library(dtatsets)
library(datatsets)
library(datasets)
data(iris)
?itis
?iris
str(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, colMeans)
head(iris)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
4v8 <- tapply(mtcars$hp, mtcars$cyl, mean)
cyl4v8 <- tapply(mtcars$hp, mtcars$cyl, mean)
cyl4v8$4
cyl4v8[1]
cyl4v8[3] - cyl4v8[1]
?<<-
?solve
?return
samp <- matrix(c(2,5,7,3,5,7,2,9,1))
samp <- matrix(c(2,5,7,3,5,7,2,9,1), 3, 3)
samp
solve(samp)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y){
x <<- y
inverse <<- NULL
}
get <- function() x
setinv <- function(inv) inverse <<- inv
getinv <- function() inverse
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse <- x$getinv()
if (!is.null(inverse)){
message("returning cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinv(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix(samp)
tramp <- makeCacheMatrix(samp)
cacheSolve(tramp)
cacheSolve(tramp) = solve(samp)
cacheSolve(tramp) == solve(samp)
?solve]
?solve
View(samp)
View(samp)
clear
samp <- matrix(c(1,5,3,1,77,3,43,22,9,6,34,11,18,19,12,16,21,44,23,7,1,60,22,4,18), 5, 5)
View(samp)
solve(samp)
## Put comments here that give an overall description of what your
## functions do
## These functions allow for
## Create a list of four functions to be used in finding the inverse
## of an invertible matrix input
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y){
x <<- y
inverse <<- NULL
}
get <- function() x
setinv <- function(inv) inverse <<- inv
getinv <- function() inverse
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Return the cached inverse matrix if there is one
## Otherwise, solve for the inverse of matrix 'x'
cacheSolve <- function(x, ...) {
inverse <- x$getinv()
if (!is.null(inverse)){
message("returning cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinv(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
tramp <- cacheSolve(samp)
tramp <- makeCacheMatrix(samp)
cacheSolve(tramp)
cacheSolve(tramp) == solve(samp)
args(lm)
?rpois
poo <- rpois(100, 6)
plot(poo)
poo <- dpois(c(1,2,3,4), 6)
plot(poo)
?pois
?rpois
ppois(10, 10)
plot(ppois(10,10))
plot(dpois(10,10))
plot(cpois(10,10))
plot(qpois(10,10))
plot(rpois(10,10))
ppois(5, 10)
plot(ppois(5,10))
1-ppois(5, 10)
plot(qpois(10,10))
traceback()
5+6+6.5+7+7.75+7.5+7+7.5+7.5
7.5+7.5+7+7.5+7.75+7+6.5+6+5
install.packages("RMySQL")
install.packages("httr")
library("httr")
app = oauth_app("github", key = "509b27f13dcd862ad28e", secret ="4fb9a2654d914cb5b1e781efc419d583645f72f1")
github_token = oauth2.0_token(oauth_endpoints("github"), app)
gtoken = config(token = github_token)
req = GET("https://api.github.com/users/jtleek/repos", gtoken)
head(req)
str(req)
stop_for_status(req)
install.packages("httpuv")
library("httpuv")
stop_for_status(req)
app = oauth_app("github", key = "509b27f13dcd862ad28e", secret ="4fb9a2654d914cb5b1e781efc419d583645f72f1")
github_token = oauth2.0_token(oauth_endpoints("github"), app)
gtoken = config(token = github_token)
req = GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
stop_for_status(req)
app = oauth_app("github", key = "509b27f13dcd862ad28e", secret ="4fb9a2654d914cb5b1e781efc419d583645f72f1")
github_token = oauth2.0_token(oauth_endpoints("github"), app)
gtoken = config(token = github_token)
req = GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
library(dplyr)
setwd("~/Desktop/UCI HAR Dataset")
features <- read.table("features.txt")
features <- features$V2
train <- read.table("train/X_train.txt")
test <- read.table("test/X_test.txt")
data.combined <- rbind(train, test)
names(data.combined) <- features
# subject column -- creates train_subject and test_subject and then mergest them
train_subject <- read.table("train/subject_train.txt")
train_subject <- train_subject$V1
test_subject <- read.table("test/subject_test.txt")
test_subject <- test_subject$V1
subject <- c(train_subject, test_subject)
# activities column -- creates train_labels and test_labels and then merges them
activity_labels <- read.table("activity_labels.txt")
activity_labels <- as.character(activity_labels$V2)
train_labels <- read.table("train/y_train.txt")
train_labels <- train_labels$V1
test_labels <- read.table("test/y_test.txt")
test_labels <- test_labels$V1
for (i in 1:6){
train_labels[which(train_labels == i)] <- activity_labels[i]
test_labels[which(test_labels == i)] <- activity_labels[i]
}
activity <- c(train_labels, test_labels)
data.combined <- cbind(subject, activity, data.combined)
# naming and eliminating columns
data.combined <- data.combined[!duplicated(names(data.combined))]
data.combined <- select(data.combined, 1:2, matches("(mean|std)\\(.*\\)"))
str(data.combined)
arranged <- group_by(data.combined, subject, activity)
View(arranged)
arranged <- group_by(data.combined, subject)
View(arranged)
arranged <- arrange(data.combined, subject)
View(arranged)
arranged <- arrange(data.combined, subject, activity)
View(arranged)
summarize(arranged, subject, activity, mean(arranged[4]))
install.packages("plyr")
library(plyr)
install.packages("reshape2")
library(reshape2)
melted <- melt(data.combined, id.vars = c("subject", "activity"))
View(melted)
View(melted)
ddply(melted, c("subject", "activity", "variable"), summarize, mean = mean(value))
meltmelt <- ddply(melted, c("subject", "activity", "variable"), summarize, mean = mean(value))
View(meltmelt)
summarize(arranged, subject, id, mean(tBodyAcc-mean()-X))
summarize(arranged, subject, id, mean("tBodyAcc-mean()-X"))
str(arranged)
180*68
180*66
?write.table
write.table(long, file = tidy, row.names = FALSE)
melted <- melt(data.combined, id.vars = c("subject", "activity"))
long <- ddply(melted, c("subject", "activity", "variable"),
summarize, mean = mean(value))
write.table(long, file = tidy, row.names = FALSE)
write.table(long, file = "tidy.txt", row.names = FALSE)
setwd("~/UCI HAR Dataset")
